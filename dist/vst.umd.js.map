{"version":3,"file":"vst.umd.js","sources":["../src/ts/components/loading_row.vue","../src/ts/use/filterable.ts","../src/ts/helpers/to_query_string.ts","../src/ts/components/slim_table.vue"],"sourcesContent":["<template>\n  <tr>\n    <td\n      :colspan=\"columnsLength\"\n      :class=\"['vst-loading-row', `vst-loading-row-${randNum}`]\">\n      <div />\n    </td>\n  </tr>\n</template>\n\n<script lang=\"ts\" setup>\ndefineProps({\n  columnsLength: { type: Number, required: true },\n})\n\nconst randNum = Math.floor(Math.random() * 10) + 1\n</script>\n","import {\n  ref, computed, reactive, watch,\n} from 'vue'\n\ntype CombinedFilters<Filters> = Filters & {\n  page: number\n}\n\ninterface UseFiltetableArgs<Filters, Item> {\n  initialFilters: Filters,\n  loadItems: (_filters: CombinedFilters<Filters>) => Promise<Item[]>\n}\n\nconst SYNC_STATES = {\n  INITIAL: 'initial',\n  SYNCING: 'syncing',\n  SYNCED: 'synced',\n  FAILED: 'failed',\n}\n\nconst useFilterable = <Filters, Item>({ initialFilters, loadItems }: UseFiltetableArgs<Filters, Item>) => {\n  const page = ref(1)\n  const items = reactive({ value: [] as Item[] }) as { value: Item[] }\n  const syncState = ref(SYNC_STATES.INITIAL)\n  const filters = reactive({ value: initialFilters })\n\n  const combinedFilters = computed(() => ({\n    page: page.value,\n    ...filters.value as Filters,\n  }))\n\n  const load = () => {\n    syncState.value = SYNC_STATES.SYNCING\n\n    return loadItems(combinedFilters.value)\n      .then((res: Item[]) => {\n        items.value = res\n        syncState.value = SYNC_STATES.SYNCED\n      })\n      .catch(() => {\n        items.value = []\n        syncState.value = SYNC_STATES.FAILED\n      })\n  }\n  load()\n\n  watch(combinedFilters, load)\n\n  return {\n    page,\n    items,\n    syncState,\n    nextPage: () => {\n      page.value += 1\n    },\n    prevPage: () => {\n      page.value -= 1\n    },\n    isSyncing: computed(() => syncState.value === SYNC_STATES.SYNCING),\n    isSynced: computed(() => syncState.value === SYNC_STATES.SYNCED),\n    isFailed: computed(() => syncState.value === SYNC_STATES.FAILED),\n    reload: () => {\n      load()\n    },\n    refetch: () => {\n      if (page.value === 1) {\n        load()\n      } else {\n        page.value = 1\n      }\n    },\n  }\n}\n\nexport default useFilterable\n","const stringify = (obj, parentPrefix?: string) => (outputArray, [key, val]) => {\n  if (val === null || val === undefined) {\n    return outputArray\n  }\n\n  const encodedKey = encodeURIComponent(key)\n  const prefix = parentPrefix ? `${parentPrefix}[${encodedKey}]` : encodedKey\n\n  if (['number', 'string'].includes(typeof val)) {\n    outputArray.push(`${prefix}=${encodeURIComponent(val)}`)\n    return outputArray\n  }\n\n  outputArray.push(Object.entries(val).reduce(stringify(val, prefix), []).join('&'))\n  return outputArray\n}\n\nexport default (obj): string => Object.entries(obj).reduce(stringify(obj), []).join('&')\n","<template>\n  <table class=\"vst\">\n    <thead v-if=\"columns.length\">\n      <slot name=\"thead\" :columns=\"columns\" :orders=\"orders\">\n        <tr>\n          <th\n            v-for=\"column in columns\"\n            :key=\"column.key\"\n            :class=\"['vst-th', { 'vst-orderable': column.orderable }]\"\n            v-on=\"column.orderable ? { click: () => onOrderClick(column.key) } : {}\">\n            <div v-if=\"column.orderable\">\n              <slot\n                :name=\"`head:${column.key}`\"\n                :column=\"column\">\n                {{ column.title }}\n              </slot>\n\n              <a href=\"#\" :class=\"['vst-orderable-toggle', orders[column.key]]\" />\n            </div>\n\n            <slot\n              v-else\n              :name=\"`thead:${column.key}`\"\n              :column=\"column\">\n              {{ column.title }}\n            </slot>\n          </th>\n        </tr>\n      </slot>\n    </thead>\n    <tbody>\n      <slot v-if=\"isSyncing\" name=\"row:loading\">\n        <LoadingRow\n          v-for=\"i in perPage\"\n          :key=\"`loadingRow${i}`\"\n          :columns-length=\"columns.length\" />\n      </slot>\n\n      <slot v-else-if=\"isSynced && rows.value.length === 0\" name=\"row:empty\">\n        <tr>\n          <td :colspan=\"columns.length\">\n            No records found\n          </td>\n        </tr>\n      </slot>\n\n      <template v-else-if=\"isSynced && rows.value.length\">\n        <slot\n          v-for=\"(row, i) in rows.value\"\n          name=\"row\"\n          :row=\"row\"\n          :index=\"i\"\n          :columns=\"columns\">\n          <tr :key=\"row['id'] || i\">\n            <td\n              v-for=\"column in columns\"\n              :key=\"column.key\">\n              <slot\n                :name=\"`cell:${column.key}`\"\n                :row=\"row\"\n                :value=\"row[column.key]\"\n                :column=\"column\"\n                :index=\"i\">\n                {{ row[column.key] }}\n              </slot>\n            </td>\n          </tr>\n        </slot>\n      </template>\n    </tbody>\n    <tfoot>\n      <tr>\n        <td :colspan=\"columns.length\">\n          <slot name=\"pagination\" :page=\"page\" :rows=\"rows.value\">\n            <ul\n              v-if=\"page > 1 || rows.value.length === perPage || isSyncing\"\n              class=\"vst-pagination mt-3\">\n              <li :class=\"['vst-page-item', { disabled: page === 1 || isSyncing }]\">\n                <a class=\"vst-page-link\" @click.prevent=\"prevPage\">←</a>\n              </li>\n\n              <li\n                :class=\"['vst-page-item', {\n                  disabled: rows.value.length < perPage || isSyncing\n                }]\">\n                <a class=\"vst-page-link\" @click.prevent=\"nextPage\">→</a>\n              </li>\n            </ul>\n          </slot>\n        </td>\n      </tr>\n    </tfoot>\n  </table>\n</template>\n\n<script setup lang=\"ts\">\nimport { shallowRef, ShallowRef } from 'vue'\nimport LoadingRow from './loading_row.vue'\n\nimport useFilterable from '../use/filterable'\nimport toQueryString from '../helpers/to_query_string'\n\ninterface TableColumn {\n  key: string,\n  title: string,\n  orderable?: boolean\n}\n\ninterface TableOrders {\n  [key: string]: 'asc' | 'desc'\n}\n\ninterface TableFetchParams {\n  per_page: number,\n  page: number,\n  orders?: TableOrders\n}\n\ninterface TableRow {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\ninterface TableFilters {\n  per_page: number,\n  orders: TableOrders\n}\n\ninterface TableProps {\n  columns: Array<TableColumn>\n  source: string | ((_: TableFetchParams) => Promise<TableRow[]> | TableRow[])\n  perPage?: number\n}\n\nconst props = withDefaults(defineProps<TableProps>(), {\n  perPage: 25,\n})\n\nconst orders: ShallowRef<TableOrders> = shallowRef({})\n\nconst loadItems = async (params: TableFetchParams) => {\n  let data: TableRow[]\n  if (typeof props.source === 'string') {\n    const response = await fetch(`${props.source}?${toQueryString(params)}`)\n    data = await response.json()\n  } else {\n    data = await props.source(params) as TableRow[]\n  }\n\n  return data\n}\n\nconst onOrderClick = (key: string) => {\n  if (orders.value[key] === 'asc') {\n    orders.value = { [key]: 'desc' }\n  } else if (orders.value[key] === 'desc') {\n    orders.value = {}\n  } else {\n    orders.value = { [key]: 'asc' }\n  }\n}\n\nconst {\n  page, isSyncing, isSynced, prevPage, nextPage, reload, refetch, items: rows,\n} = useFilterable<TableFilters, TableRow>({\n  initialFilters: { per_page: props.perPage, orders: orders.value },\n  loadItems,\n})\n\ndefineExpose({\n  refetch,\n  reload,\n  rows,\n})\n</script>\n"],"names":["randNum","SYNC_STATES","useFilterable","initialFilters","loadItems","page","ref","items","reactive","syncState","filters","combinedFilters","computed","load","res","watch","stringify","obj","parentPrefix","outputArray","key","val","encodedKey","prefix","toQueryString","orders","shallowRef","params","data","props","onOrderClick","isSyncing","isSynced","prevPage","nextPage","reload","refetch","rows","expose"],"mappings":"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"}